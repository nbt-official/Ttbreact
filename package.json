import React, { useState, useEffect, useCallback } from 'react';
import { Loader, CheckCircle, XCircle, RefreshCcw } from 'lucide-react';

function App() {
  const [sessionId, setSessionId] = useState(null);
  const [authKey, setAuthKey] = useState(null);
  const [contentData, setContentData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Define API constants
  const BASE_API_URL = "https://slt-api.revlet.net/service";
  const TOKEN_ENDPOINT = `${BASE_API_URL}/api/v1/get/token`;
  const LOCATION_INFO_ENDPOINT = `${BASE_API_URL}/location/api/v1/locationinfo`;
  const CONTENT_ENDPOINT = `${BASE_API_URL}/api/v1/page/content`;

  // Static parameters based on your provided request
  const TENANT_CODE = "slt";
  const PRODUCT = "slt";
  const DEVICE_ID = "61";
  const DISPLAY_LANG_CODE = "ENG";
  const DEVICE_SUB_TYPE = "Chrome,107.0.0.0,Linux";
  const TIMEZONE = "Asia/Colombo";
  const BOX_ID = "f601feb8-664b-dc2f-107b-6829f0fd5f8b";
  const CLIENT_MOBILEWEB = "mobileweb";
  const CONTENT_PATH = "channel/live/swarnavahini";

  // Function to make API requests
  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    setSessionId(null);
    setAuthKey(null);
    setContentData(null);

    try {
      // 1. Fetch Session ID
      const tokenUrl = `${TOKEN_ENDPOINT}?tenant_code=${TENANT_CODE}&box_id=${BOX_ID}&product=${PRODUCT}&device_id=${DEVICE_ID}&display_lang_code=${DISPLAY_LANG_CODE}&device_sub_type=${DEVICE_SUB_TYPE}&timezone=${TIMEZONE}`;
      console.log("Fetching Session ID from:", tokenUrl);
      const tokenResponse = await fetch(tokenUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json, text/plain, */*',
          'Accept-Encoding': 'gzip, deflate, br',
          'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
          'Origin': 'https://www.peotvgo.com',
          'Referer': 'https://www.peotvgo.com/',
          'User-Agent': 'Mozilla/5.0 (Linux; Android 14; SM-A065F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36',
          'Sec-Fetch-Dest': 'empty',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Site': 'cross-site',
        },
      });

      if (!tokenResponse.ok) {
        throw new Error(`Failed to fetch session ID: ${tokenResponse.status} ${tokenResponse.statusText}`);
      }
      const tokenData = await tokenResponse.json();
      const fetchedSessionId = tokenData?.response?.sessionId;
      if (!fetchedSessionId) {
        throw new Error("Session ID not found in token response.");
      }
      setSessionId(fetchedSessionId);
      console.log("Session ID obtained:", fetchedSessionId);


      // 2. Fetch Auth Key (Location Info)
      const locationInfoUrl = `${LOCATION_INFO_ENDPOINT}?tenant_code=${TENANT_CODE}&product=${PRODUCT}&client=${CLIENT_MOBILEWEB}`;
      console.log("Fetching Auth Key from:", locationInfoUrl);
      const locationInfoResponse = await fetch(locationInfoUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json, text/plain, */*',
          'Accept-Encoding': 'gzip, deflate, br',
          'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
          'Origin': 'https://www.peotvgo.com',
          'Referer': 'https://www.peotvgo.com/',
          'User-Agent': 'Mozilla/5.0 (Linux; Android 14; SM-A065F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36',
          'Sec-Fetch-Dest': 'empty',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Site': 'cross-site',
        },
      });

      if (!locationInfoResponse.ok) {
        throw new Error(`Failed to fetch auth key: ${locationInfoResponse.status} ${locationInfoResponse.statusText}`);
      }
      const locationInfoData = await locationInfoResponse.json();
      const fetchedAuthKey = locationInfoData?.analyticsInfo?.authKey;
      if (!fetchedAuthKey) {
        throw new Error("Auth Key not found in location info response.");
      }
      setAuthKey(fetchedAuthKey);
      console.log("Auth Key obtained:", fetchedAuthKey);


      // 3. Fetch Content API Result
      const contentUrl = `${CONTENT_ENDPOINT}?path=${CONTENT_PATH}`;
      console.log("Fetching Content from:", contentUrl);
      const contentResponse = await fetch(contentUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json, text/plain, */*',
          'Accept-Encoding': 'gzip, deflate, br',
          'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
          'box-id': BOX_ID,
          'Origin': 'https://www.peotvgo.com',
          'Referer': 'https://www.peotvgo.com/',
          'sec-ch-ua': '"Chromium";v="107", "Not=A?Brand";v="24"',
          'sec-ch-ua-mobile': '?1',
          'sec-ch-ua-platform': '"Android"',
          'Sec-Fetch-Dest': 'empty',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Site': 'cross-site',
          'session-id': fetchedSessionId, // Use the fetched session ID
          'tenant-code': TENANT_CODE,
          'User-Agent': 'Mozilla/5.0 (Linux; Android 14; SM-A065F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36',
        },
      });

      if (!contentResponse.ok) {
        throw new Error(`Failed to fetch content data: ${contentResponse.status} ${contentResponse.statusText}`);
      }
      const contentApiData = await contentResponse.json();
      setContentData(contentApiData);
      console.log("Content data obtained:", contentApiData);

    } catch (err) {
      console.error("API Fetch Error:", err);
      setError(err.message || "An unknown error occurred.");
    } finally {
      setLoading(false);
    }
  }, []); // Empty dependency array ensures this runs once on mount

  // Run fetchData on component mount
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 p-4 sm:p-6 lg:p-8 font-inter flex flex-col items-center">
      <style>
        {`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
          font-family: 'Inter', sans-serif;
        }
        .code-block {
          white-space: pre-wrap; /* Ensures text wraps within the block */
          word-break: break-all; /* Breaks long words if necessary */
          overflow-x: auto; /* Adds horizontal scroll for very long lines */
        }
        `}
      </style>

      <div className="bg-gray-800 rounded-lg shadow-xl p-6 md:p-8 lg:p-10 w-full max-w-4xl border border-gray-700">
        <h1 className="text-3xl sm:text-4xl font-bold text-blue-400 mb-6 text-center">
          API Content Viewer
        </h1>

        <button
          onClick={fetchData}
          className="flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition-all duration-300 ease-in-out mb-8 w-full md:w-auto mx-auto"
          disabled={loading}
        >
          {loading ? (
            <Loader className="animate-spin mr-2" size={20} />
          ) : (
            <RefreshCcw className="mr-2" size={20} />
          )}
          {loading ? 'Fetching Data...' : 'Refresh Data'}
        </button>

        {error && (
          <div className="bg-red-900 border border-red-700 text-red-200 p-4 rounded-md mb-6 flex items-center">
            <XCircle className="mr-3" size={24} />
            <span className="font-medium">Error:</span> {error}
          </div>
        )}

        {!loading && !error && (
          <div className="space-y-6">
            <div className="bg-gray-700 p-4 rounded-md shadow-inner border border-gray-600">
              <h2 className="text-xl font-semibold text-gray-200 mb-2 flex items-center">
                <CheckCircle className="text-green-400 mr-2" size={20} />
                Session ID:
              </h2>
              <p className="text-blue-300 code-block break-all">{sessionId || "N/A"}</p>
            </div>

            <div className="bg-gray-700 p-4 rounded-md shadow-inner border border-gray-600">
              <h2 className="text-xl font-semibold text-gray-200 mb-2 flex items-center">
                <CheckCircle className="text-green-400 mr-2" size={20} />
                Auth Key:
              </h2>
              <p className="text-blue-300 code-block break-all">{authKey || "N/A"}</p>
            </div>

            <div className="bg-gray-700 p-4 rounded-md shadow-inner border border-gray-600">
              <h2 className="text-xl font-semibold text-gray-200 mb-2 flex items-center">
                <CheckCircle className="text-green-400 mr-2" size={20} />
                Content API Result:
              </h2>
              {contentData ? (
                <pre className="bg-gray-900 text-green-200 p-4 rounded-md code-block text-sm overflow-x-auto">
                  <code>{JSON.stringify(contentData, null, 2)}</code>
                </pre>
              ) : (
                <p className="text-gray-400">No content data available.</p>
              )}
            </div>
          </div>
        )}

        {loading && (
          <div className="flex flex-col items-center justify-center min-h-[200px] text-gray-400">
            <Loader className="animate-spin text-blue-400 mb-4" size={48} />
            <p className="text-lg">Loading API data...</p>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
